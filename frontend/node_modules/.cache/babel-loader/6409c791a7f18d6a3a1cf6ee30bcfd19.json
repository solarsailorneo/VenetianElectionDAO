{"ast":null,"code":"var _jsxFileName = \"/home/siquike/projectsNode/04_15_22/moralis-poll/frontend/src/components/Polls.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useMoralis, useNativeBalance, useNewMoralisObject } from \"react-moralis\";\nimport Poll from \"react-polls\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet saved_account = \"\"; // WARNING: DEMO CODE/WIP\n// TODO: Need to display/build Polls data from Moralis instance.\n// TODO: utilise further  calls such as â€¦\n// 'const { switchNetwork, chainId, chain, account } = useChain();'\n// Declaring poll question and answers\n// Currenltly static, exisiting example of objectId in Moralis instance's db.\n\nconst pollQuestion = \"Who should be Doge ?\";\nconst answers = [{\n  option: \"Yes\",\n  votes: 7\n}];\nlet option_voted = \"\";\nlet poll_id = 1;\nlet voter = {};\nlet poll_title = \"\";\nlet poll_options = [];\n\nfunction Polls(_ref) {\n  _s();\n\n  let {\n    more\n  } = _ref;\n  const [access, setReg] = useState(false);\n  const [initialState, setInitialState] = useState(0);\n  const {\n    isInitialized,\n    account,\n    isAuthenticated,\n    Moralis\n  } = useMoralis();\n  const [validatedWallet, setValidatedWallet] = useState(false);\n  const [answers, setAnswers] = useState([]);\n  const [randomSelection, setRandomSelection] = useState(true);\n  const {\n    getBalance,\n    data: balance,\n    nativeToken,\n    isLoading\n  } = useNativeBalance({\n    chain: \"rinkeby\"\n  });\n  const {\n    isSaving,\n    error,\n    save,\n    object\n  } = useNewMoralisObject(\"Polls\"); // Setting answers to state to reload the component with each vote\n\n  const [pollAnswers, setPollAnswers] = useState([...answers]);\n  const isInitialMount = useRef(true);\n\n  const updatePoll = async () => {\n    const PollData = Moralis.Object.extend(\"Polls\");\n    const query = new Moralis.Query(PollData); // Building Poll from Moralis instance will include: 'query.equalTo(\"id\", 1);'\n\n    query.equalTo(\"pollId\", 1); //<-- temp/static id to update same row, instead of saving new row\n\n    const poll = await query.first();\n    return poll;\n  };\n\n  const submitWallet = async () => {\n    if (account != null) {\n      const address = {\n        address: account\n      };\n      console.log(JSON.stringify(address));\n      const result = await fetch('/api/', {\n        method: 'POST',\n        headers: {\n          'content-Type': 'application/json'\n        },\n        body: JSON.stringify(address),\n        mode: \"cors\"\n      });\n      const resultInJson = await result.json();\n      console.log(resultInJson); // // if(resultInJson.confirmation)\n      // // {\n      // const electees = await fetch('/api/');\n      // const electeesInJson = await electees.json();\n\n      console.log(resultInJson.electee_pool);\n      setAnswers(resultInJson.electee_pool);\n      setRandomSelection(resultInJson.random_selection);\n      setPollAnswers(resultInJson.electee_pool); // }\n    }\n  };\n\n  const getElectionResult = async () => {\n    const electionResult = await fetch('/api/');\n    const electionResultInJson = await electionResult.json();\n    console.log(electionResultInJson);\n  }; // check reg status -> handle\n\n\n  const checkReg = async _access => {\n    if (!isAuthenticated) {\n      // not authenticated user\n      return false;\n    } else {\n      // access condition\n      _access = balance.balance && balance.balance > 0 ? true : false;\n\n      if (_access) {\n        // reset/build options\n        // give access to vote if meets conditions\n        setReg(_access);\n        saved_account = account;\n      } else {// no access\n      }\n\n      return _access;\n    }\n  };\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      // run on update\n      if (isInitialized && balance.balance > 0) {\n        if (saved_account !== account) {\n          // check registration status\n          checkReg();\n        }\n      } else {\n        // reset registration status to false\n        setReg(false);\n      }\n    }\n  }, [account, balance, isInitialized]);\n  useEffect(() => {\n    submitWallet();\n    getElectionResult();\n    isInitialMount.current = false;\n    option_voted = \"\";\n    voter = account;\n    poll_title = pollQuestion; // poll_options = answers;\n    // console.log(\"poll options: \" + poll_options)\n    // setPollAnswers(poll_options);\n  }, [isInitialMount.current]);\n\n  const handleVote = async voteAnswer => {\n    option_voted = voteAnswer;\n    const asyncVoteRes = await Promise.all(pollAnswers.map(async answer => {\n      if (answer.option === option_voted) {\n        answer.votes = answer.votes + 1;\n      }\n\n      return answer;\n    }));\n    console.log(\"Async\", asyncVoteRes);\n    poll_options = asyncVoteRes; // Poll Class Design\n    // columns: poll_id: uint, poll_options: [{option: \"Yes\", votes: 7}, {option: \"No\", votes: 2}], poll_voters: {user_id}\n    // test db integration with static example\n    // create poll\n    //\n\n    let poll_data = {\n      id: poll_id,\n      title: poll_title,\n      options: poll_options,\n      voted: voter\n    };\n    const pollObject = new Moralis.Object(\"Polls\");\n    pollObject.set(\"id\", poll_data.id);\n    pollObject.set(\"title\", poll_data.title);\n    pollObject.set(\"options\", poll_data.options);\n    pollObject.addUnique(\"voted\", poll_data.voted);\n    pollObject.save();\n  };\n\n  const handleContinue = async () => {\n    const continueElection = {\n      continueProcess: true\n    };\n    console.log(JSON.stringify(continueElection));\n    const result = await fetch('/api/', {\n      method: 'POST',\n      headers: {\n        'content-Type': 'application/json'\n      },\n      body: JSON.stringify(continueElection),\n      mode: \"cors\"\n    });\n    const resultInJson = await result.json();\n    console.log(resultInJson);\n    setRandomSelection(resultInJson.random_selection);\n  };\n\n  console.log(\"random selection: \" + randomSelection); // Not authoriased\n\n  if (!access) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"NO ACCESS\"\n    }, void 0, false);\n  } else if (randomSelection) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Poll, {\n        question: pollQuestion,\n        answers: pollAnswers,\n        onVote: handleVote,\n        noStorage: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleContinue,\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    // Authoriased\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Poll, {\n        question: pollQuestion,\n        answers: pollAnswers,\n        onVote: handleVote,\n        noStorage: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\n\n_s(Polls, \"w49EDEGuaT2wOPbvZSBjYnr/VMA=\", false, function () {\n  return [useMoralis, useNativeBalance, useNewMoralisObject];\n});\n\n_c = Polls;\nexport default Polls;\n\nvar _c;\n\n$RefreshReg$(_c, \"Polls\");","map":{"version":3,"sources":["/home/siquike/projectsNode/04_15_22/moralis-poll/frontend/src/components/Polls.js"],"names":["React","useState","useEffect","useRef","useMoralis","useNativeBalance","useNewMoralisObject","Poll","saved_account","pollQuestion","answers","option","votes","option_voted","poll_id","voter","poll_title","poll_options","Polls","more","access","setReg","initialState","setInitialState","isInitialized","account","isAuthenticated","Moralis","validatedWallet","setValidatedWallet","setAnswers","randomSelection","setRandomSelection","getBalance","data","balance","nativeToken","isLoading","chain","isSaving","error","save","object","pollAnswers","setPollAnswers","isInitialMount","updatePoll","PollData","Object","extend","query","Query","equalTo","poll","first","submitWallet","address","console","log","JSON","stringify","result","fetch","method","headers","body","mode","resultInJson","json","electee_pool","random_selection","getElectionResult","electionResult","electionResultInJson","checkReg","_access","current","handleVote","voteAnswer","asyncVoteRes","Promise","all","map","answer","poll_data","id","title","options","voted","pollObject","set","addUnique","handleContinue","continueElection","continueProcess"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  useMoralis,\n  useNativeBalance,\n  useNewMoralisObject,\n} from \"react-moralis\";\nimport Poll from \"react-polls\";\n\nlet saved_account = \"\";\n\n// WARNING: DEMO CODE/WIP\n// TODO: Need to display/build Polls data from Moralis instance.\n// TODO: utilise further  calls such as â€¦\n// 'const { switchNetwork, chainId, chain, account } = useChain();'\n\n// Declaring poll question and answers\n// Currenltly static, exisiting example of objectId in Moralis instance's db.\n\nconst pollQuestion = \"Who should be Doge ?\";\nconst answers = [\n  { option: \"Yes\", votes: 7 }\n];\nlet option_voted = \"\";\nlet poll_id = 1;\nlet voter = {};\nlet poll_title = \"\";\nlet poll_options = [];\n\nfunction Polls({ more }) {\n  const [access, setReg] = useState(false);\n  const [initialState, setInitialState] = useState(0);\n  const { isInitialized, account, isAuthenticated, Moralis } = useMoralis();\n  const [validatedWallet, setValidatedWallet] = useState(false);\n  const [answers, setAnswers] = useState([]);\n  const [randomSelection, setRandomSelection] = useState(true);\n\n  const {\n    getBalance,\n    data: balance,\n    nativeToken,\n    isLoading,\n  } = useNativeBalance({ chain: \"rinkeby\" });\n  const { isSaving, error, save, object } = useNewMoralisObject(\"Polls\");\n\n  // Setting answers to state to reload the component with each vote\n  const [pollAnswers, setPollAnswers] = useState([...answers]);\n  const isInitialMount = useRef(true);\n\n  const updatePoll = async () => {\n    const PollData = Moralis.Object.extend(\"Polls\");\n    const query = new Moralis.Query(PollData);\n    // Building Poll from Moralis instance will include: 'query.equalTo(\"id\", 1);'\n    query.equalTo(\"pollId\", 1); //<-- temp/static id to update same row, instead of saving new row\n    const poll = await query.first();\n\n    return poll;\n  };\n\n  const submitWallet = async () => {\n      \n    if(account != null)\n    {\n      const address = {\n        address: account\n      }\n      console.log(JSON.stringify(address));\n      const result = await fetch('/api/', {\n        method: 'POST',\n        headers: {\n          'content-Type': 'application/json'\n        },\n        body: JSON.stringify(address), \n        mode: \"cors\"\n      })\n  \n      const resultInJson = await result.json();\n      console.log(resultInJson);\n\n      // // if(resultInJson.confirmation)\n      // // {\n      // const electees = await fetch('/api/');\n      // const electeesInJson = await electees.json();\n      console.log(resultInJson.electee_pool)\n\n      setAnswers(resultInJson.electee_pool);\n      setRandomSelection(resultInJson.random_selection);\n      setPollAnswers(resultInJson.electee_pool);\n\n      // }\n    }\n\n  }\n\n\n  const getElectionResult = async () => {\n    const electionResult = await fetch('/api/');\n    const electionResultInJson = await electionResult.json();\n\n    console.log(electionResultInJson)\n  }\n\n    // check reg status -> handle\n    const checkReg = async (_access) => {\n      if (!isAuthenticated) {\n        // not authenticated user\n        return false;\n      } else {\n        // access condition\n        _access = balance.balance && balance.balance > 0 ? true : false;\n        if (_access) {\n          // reset/build options\n          \n          // give access to vote if meets conditions\n          setReg(_access);\n          saved_account = account;\n        } else {\n          // no access\n        }\n  \n        return _access;\n      }\n    };\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      // run on update\n      if (isInitialized && balance.balance > 0) {\n        if (saved_account !== account) {\n          // check registration status\n          checkReg();\n        }\n      } else {\n        // reset registration status to false\n        setReg(false);\n      }\n    }\n  }, [account, balance, isInitialized]);\n\n  useEffect(() => {\n\n    submitWallet();\n    getElectionResult();\n\n    isInitialMount.current = false;\n    option_voted = \"\";\n    voter = account;\n    poll_title = pollQuestion;\n    // poll_options = answers;\n    // console.log(\"poll options: \" + poll_options)\n    // setPollAnswers(poll_options);\n    \n  },[isInitialMount.current]);\n\n  const handleVote = async (voteAnswer) => {\n    option_voted = voteAnswer;\n\n    const asyncVoteRes = await Promise.all(\n      pollAnswers.map(async (answer) => {\n        if (answer.option === option_voted) {\n          answer.votes = answer.votes + 1;\n        }\n        return answer;\n      })\n    );\n\n    console.log(\"Async\", asyncVoteRes);\n    poll_options = asyncVoteRes;\n\n    // Poll Class Design\n    // columns: poll_id: uint, poll_options: [{option: \"Yes\", votes: 7}, {option: \"No\", votes: 2}], poll_voters: {user_id}\n\n    // test db integration with static example\n    // create poll\n    //\n    let poll_data = {\n      id: poll_id,\n      title: poll_title,\n      options: poll_options,\n      voted: voter,\n    };\n\n    const pollObject = new Moralis.Object(\"Polls\");\n    pollObject.set(\"id\", poll_data.id);\n    pollObject.set(\"title\", poll_data.title);\n    pollObject.set(\"options\", poll_data.options);\n    pollObject.addUnique(\"voted\", poll_data.voted);\n    pollObject.save();\n  };\n\n  const handleContinue = async () => {\n    const continueElection = {\n      continueProcess: true\n    }\n    console.log(JSON.stringify(continueElection));\n    const result = await fetch('/api/', {\n      method: 'POST',\n      headers: {\n        'content-Type': 'application/json'\n      },\n      body: JSON.stringify(continueElection), \n      mode: \"cors\"\n    })\n\n    const resultInJson = await result.json();\n    console.log(resultInJson);\n    setRandomSelection(resultInJson.random_selection);\n\n\n  \n\n  };\n\n  console.log(\"random selection: \" + randomSelection)\n\n\n  // Not authoriased\n  if (!access) {\n    return <>{\"NO ACCESS\"}</>;\n  }\n  else if(randomSelection)\n  {\n    return (\n      <>\n        <Poll\n          question={pollQuestion}\n          answers={pollAnswers}\n          onVote={handleVote}\n          noStorage\n        />\n        <button \n          onClick={handleContinue}>\n          Continue\n        </button>\n      </>\n    );\n  }\n  else\n  {\n    // Authoriased\n    return (\n      <>\n        <Poll\n          question={pollQuestion}\n          answers={pollAnswers}\n          onVote={handleVote}\n          noStorage\n        />\n      </>\n    );\n  }\n  \n\n  \n}\n\nexport default Polls;\n"]},"metadata":{},"sourceType":"module"}