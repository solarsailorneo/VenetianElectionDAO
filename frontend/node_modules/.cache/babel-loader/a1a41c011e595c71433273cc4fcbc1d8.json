{"ast":null,"code":"var _jsxFileName = \"/home/siquike/projectsNode/04_15_22/moralis-poll/frontend/src/components/Polls.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useMoralis, useNativeBalance, useNewMoralisObject } from \"react-moralis\";\nimport Poll from \"react-polls\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet saved_account = \"\"; // WARNING: DEMO CODE/WIP\n// TODO: Need to display/build Polls data from Moralis instance.\n// TODO: utilise further  calls such as â€¦\n// 'const { switchNetwork, chainId, chain, account } = useChain();'\n// Declaring poll question and answers\n// Currenltly static, exisiting example of objectId in Moralis instance's db.\n\nconst pollQuestion = \"Youtube is the best place to learn ?\";\nconst answers = [{\n  option: \"Yes\",\n  votes: 7\n}, {\n  option: \"No\",\n  votes: 2\n}, {\n  option: \"don't know\",\n  votes: 1\n}];\nlet option_voted = \"\";\nlet poll_id = 1;\nlet voter = {};\nlet poll_title = \"\";\nlet poll_options = [];\n\nfunction Polls(_ref) {\n  _s();\n\n  let {\n    more\n  } = _ref;\n  const [access, setReg] = useState(false);\n  const [initialState, setInitialState] = useState(0);\n  const {\n    isInitialized,\n    account,\n    isAuthenticated,\n    Moralis\n  } = useMoralis();\n  const {\n    getBalance,\n    data: balance,\n    nativeToken,\n    isLoading\n  } = useNativeBalance({\n    chain: \"rinkeby\"\n  });\n  const {\n    isSaving,\n    error,\n    save,\n    object\n  } = useNewMoralisObject(\"Polls\"); // Setting answers to state to reload the component with each vote\n\n  const [pollAnswers, setPollAnswers] = useState([...answers]);\n  const isInitialMount = useRef(true);\n\n  const updatePoll = async () => {\n    const PollData = Moralis.Object.extend(\"Polls\");\n    const query = new Moralis.Query(PollData); // Building Poll from Moralis instance will include: 'query.equalTo(\"id\", 1);'\n\n    query.equalTo(\"pollId\", 1); //<-- temp/static id to update same row, instead of saving new row\n\n    const poll = await query.first();\n    return poll;\n  }; // check reg status -> handle\n\n\n  const checkReg = async _access => {\n    if (!isAuthenticated) {\n      // not authenticated user\n      return false;\n    } else {\n      // access condition\n      _access = balance.balance && balance.balance > 0 ? true : false;\n\n      if (_access) {\n        // reset/build options\n        option_voted = \"\";\n        voter = account;\n        poll_title = pollQuestion;\n        poll_options = answers;\n        setPollAnswers(poll_options); // give access to vote if meets conditions\n\n        setReg(_access);\n        saved_account = account;\n      } else {// no access\n      }\n\n      return _access;\n    }\n  };\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      // run on update\n      if (isInitialized && balance.balance > 0) {\n        if (saved_account !== account) {\n          // check registration status\n          checkReg();\n        }\n      } else {\n        // reset registration status to false\n        setReg(false);\n      }\n    }\n  }, [account, balance, isInitialized]);\n\n  const handleVote = async voteAnswer => {\n    option_voted = voteAnswer;\n    const asyncVoteRes = await Promise.all(pollAnswers.map(async answer => {\n      if (answer.option === option_voted) {\n        answer.votes = answer.votes + 1;\n      }\n\n      return answer;\n    }));\n    console.log(\"Async\", asyncVoteRes);\n    poll_options = asyncVoteRes; // Poll Class Design\n    // columns: poll_id: uint, poll_options: [{option: \"Yes\", votes: 7}, {option: \"No\", votes: 2}], poll_voters: {user_id}\n    // test db integration with static example\n    // create poll\n    //\n\n    let poll_data = {\n      id: poll_id,\n      title: poll_title,\n      options: poll_options,\n      voted: voter\n    };\n    const pollObject = new Moralis.Object(\"Polls\");\n    pollObject.set(\"id\", poll_data.id);\n    pollObject.set(\"title\", poll_data.title);\n    pollObject.set(\"options\", poll_data.options);\n    pollObject.addUnique(\"voted\", poll_data.voted);\n    pollObject.save();\n  };\n\n  useEffect(() => {\n    fetch('/api/').then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n    }).then(jsonResponse => console.log(jsonResponse));\n  }, []);\n\n  const submitWallet = async () => {\n    const address = {\n      address: account\n    };\n    const result = await fetch('http://localhost:9000/api.', {\n      method: 'POST',\n      headers: {\n        'content-Type': 'application/json'\n      },\n      body: JSON.stringify(address)\n    });\n    const resultInJson = await result.json;\n    console.log(resultInJson);\n  };\n\n  submitWallet(); // Not authoriased\n\n  if (!access) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"NO ACCESS\"\n    }, void 0, false);\n  } // Authoriased\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Poll, {\n      question: pollQuestion,\n      answers: pollAnswers,\n      onVote: handleVote,\n      noStorage: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Polls, \"UuAvlCYgB9nUU3F2LcyHS5uvkGs=\", false, function () {\n  return [useMoralis, useNativeBalance, useNewMoralisObject];\n});\n\n_c = Polls;\nexport default Polls;\n\nvar _c;\n\n$RefreshReg$(_c, \"Polls\");","map":{"version":3,"sources":["/home/siquike/projectsNode/04_15_22/moralis-poll/frontend/src/components/Polls.js"],"names":["React","useState","useEffect","useRef","useMoralis","useNativeBalance","useNewMoralisObject","Poll","saved_account","pollQuestion","answers","option","votes","option_voted","poll_id","voter","poll_title","poll_options","Polls","more","access","setReg","initialState","setInitialState","isInitialized","account","isAuthenticated","Moralis","getBalance","data","balance","nativeToken","isLoading","chain","isSaving","error","save","object","pollAnswers","setPollAnswers","isInitialMount","updatePoll","PollData","Object","extend","query","Query","equalTo","poll","first","checkReg","_access","current","handleVote","voteAnswer","asyncVoteRes","Promise","all","map","answer","console","log","poll_data","id","title","options","voted","pollObject","set","addUnique","fetch","then","res","ok","json","jsonResponse","submitWallet","address","result","method","headers","body","JSON","stringify","resultInJson"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  useMoralis,\n  useNativeBalance,\n  useNewMoralisObject,\n} from \"react-moralis\";\nimport Poll from \"react-polls\";\n\nlet saved_account = \"\";\n\n// WARNING: DEMO CODE/WIP\n// TODO: Need to display/build Polls data from Moralis instance.\n// TODO: utilise further  calls such as â€¦\n// 'const { switchNetwork, chainId, chain, account } = useChain();'\n\n// Declaring poll question and answers\n// Currenltly static, exisiting example of objectId in Moralis instance's db.\n\nconst pollQuestion = \"Youtube is the best place to learn ?\";\nconst answers = [\n  { option: \"Yes\", votes: 7 },\n  { option: \"No\", votes: 2 },\n  { option: \"don't know\", votes: 1 },\n];\nlet option_voted = \"\";\nlet poll_id = 1;\nlet voter = {};\nlet poll_title = \"\";\nlet poll_options = [];\n\nfunction Polls({ more }) {\n  const [access, setReg] = useState(false);\n  const [initialState, setInitialState] = useState(0);\n  const { isInitialized, account, isAuthenticated, Moralis } = useMoralis();\n\n  const {\n    getBalance,\n    data: balance,\n    nativeToken,\n    isLoading,\n  } = useNativeBalance({ chain: \"rinkeby\" });\n  const { isSaving, error, save, object } = useNewMoralisObject(\"Polls\");\n\n  // Setting answers to state to reload the component with each vote\n  const [pollAnswers, setPollAnswers] = useState([...answers]);\n  const isInitialMount = useRef(true);\n\n  const updatePoll = async () => {\n    const PollData = Moralis.Object.extend(\"Polls\");\n    const query = new Moralis.Query(PollData);\n    // Building Poll from Moralis instance will include: 'query.equalTo(\"id\", 1);'\n    query.equalTo(\"pollId\", 1); //<-- temp/static id to update same row, instead of saving new row\n    const poll = await query.first();\n\n    return poll;\n  };\n\n  // check reg status -> handle\n  const checkReg = async (_access) => {\n    if (!isAuthenticated) {\n      // not authenticated user\n      return false;\n    } else {\n      // access condition\n      _access = balance.balance && balance.balance > 0 ? true : false;\n      if (_access) {\n        // reset/build options\n        option_voted = \"\";\n        voter = account;\n        poll_title = pollQuestion;\n        poll_options = answers;\n        setPollAnswers(poll_options);\n        // give access to vote if meets conditions\n        setReg(_access);\n        saved_account = account;\n      } else {\n        // no access\n      }\n\n      return _access;\n    }\n  };\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      // run on update\n      if (isInitialized && balance.balance > 0) {\n        if (saved_account !== account) {\n          // check registration status\n          checkReg();\n        }\n      } else {\n        // reset registration status to false\n        setReg(false);\n      }\n    }\n  }, [account, balance, isInitialized]);\n\n  const handleVote = async (voteAnswer) => {\n    option_voted = voteAnswer;\n\n    const asyncVoteRes = await Promise.all(\n      pollAnswers.map(async (answer) => {\n        if (answer.option === option_voted) {\n          answer.votes = answer.votes + 1;\n        }\n        return answer;\n      })\n    );\n\n    console.log(\"Async\", asyncVoteRes);\n    poll_options = asyncVoteRes;\n\n    // Poll Class Design\n    // columns: poll_id: uint, poll_options: [{option: \"Yes\", votes: 7}, {option: \"No\", votes: 2}], poll_voters: {user_id}\n\n    // test db integration with static example\n    // create poll\n    //\n    let poll_data = {\n      id: poll_id,\n      title: poll_title,\n      options: poll_options,\n      voted: voter,\n    };\n\n    const pollObject = new Moralis.Object(\"Polls\");\n    pollObject.set(\"id\", poll_data.id);\n    pollObject.set(\"title\", poll_data.title);\n    pollObject.set(\"options\", poll_data.options);\n    pollObject.addUnique(\"voted\", poll_data.voted);\n    pollObject.save();\n  };\n\n  useEffect(() => {\n    fetch('/api/').then(res => {\n      if(res.ok){\n        return res.json()\n      }\n    }).then(jsonResponse => console.log(jsonResponse))\n  },[]);\n\n  const submitWallet = async () => {\n    const address = {\n      address: account\n    }\n\n    const result = await fetch('http://localhost:9000/api.', {\n      method: 'POST',\n      headers: {\n        'content-Type': 'application/json'\n      },\n      body: JSON.stringify(address)\n    })\n\n    const resultInJson = await result.json;\n    console.log(resultInJson);\n  }\n\n  submitWallet();\n\n  // Not authoriased\n  if (!access) {\n    return <>{\"NO ACCESS\"}</>;\n  }\n\n  // Authoriased\n  return (\n    <>\n      <Poll\n        question={pollQuestion}\n        answers={pollAnswers}\n        onVote={handleVote}\n        noStorage\n      />\n    </>\n  );\n}\n\nexport default Polls;\n"]},"metadata":{},"sourceType":"module"}